{
	// Place your do_it workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Setup bloc module": {
		"prefix": "febloc",
		"body": [
			"import 'package:bloc/bloc.dart';",
			"import 'package:equatable/equatable.dart';",
			"",
			"enum ${1}Action {calculate}",
			"",
			"class ${1}Event<T> extends Equatable {",
			"	${1}Event({this.action, this.data,}) : super([action, data]);",
			"	final ${1}Action action;",
			"	final T data;",
			"	bool hasData() {",
			"		return this.action != null && this.data !=null;",
			"	}",
			"}",
			"",
			"enum ${1}Reaction {success}",
			"",
			"class ${1}State<T> extends Equatable {",
			"	${1}State({this.reaction, this.data})",
			"		:super([reaction, data]);",
			"	final ${1}Reaction reaction;",
			"	final T data;",
			"	bool hasData() {",
			"		return this.reaction != null && this.data !=null;",
			"	}",
			"}",
			"",
			"class ${1}Bloc extends Bloc<${1}Event, ${1}State> {",
			"	@override",
			"	${1}State get initialState => ${1}State();",
			"",
			"	@override",
			"	Stream<${1}State> mapEventToState(${1}Event event) {",
			"		return null;",
			"	}"
			"}"
		]
	}
}